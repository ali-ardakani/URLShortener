# Generated by Django 4.1.1 on 2022-09-14 22:25

from django.db import migrations, models
# get id after obj creation
# convert id use converter function as seed
# update short_url field with new value
# Auto generate short_url field
class Migration(migrations.Migration):

    dependencies = [
        ('url_shortener', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='url',
            options={'ordering': ('on_clicks',)},
        ),
        migrations.AlterField(
            model_name='url',
            name='short_url',
            field=models.CharField(max_length=6, null=True, unique=True),
        ),
        migrations.RunSQL(
            sql="""
                CREATE OR REPLACE FUNCTION random_string(length integer, seed float8 DEFAULT 0.0) RETURNS text AS $$
                DECLARE
                    chars text[] := ARRAY['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7','8','9'];
                    result text := '';
                    i integer := 0;
                BEGIN
                    perform setseed(seed);
                    while i < length loop
                        result := result || chars[trunc(random() * 62) + 1];
                        i := i + 1;
                    end loop;
                    return result;
                END;
                $$ LANGUAGE plpgsql;

                CREATE OR REPLACE FUNCTION converter(decimal) RETURNS decimal AS $$
                DECLARE
                    result text;
                    return_value decimal;
                BEGIN
                    result := '0.' || $1;
                    result := result || '1';
                    return_value := result::decimal;
                    RETURN return_value;
                END;
                $$ LANGUAGE plpgsql;
                
                create or replace function update_short_url()
                returns trigger language plpgsql
                as $function$
                begin
                    update url_shortener_url
                    set short_url = random_string(6, converter(new.id))
                    where id = new.id;
                    return new;
                end;
                $function$;
                create trigger update_short_url
                after insert on url_shortener_url
                for each row
                execute procedure update_short_url();
                """),
    ]
